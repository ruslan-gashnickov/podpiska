# bot/handlers/distribute_points.py

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from bot.keyboards.inline import main_menu, cancel_keyboard
import aiohttp
import logging
import json

logger = logging.getLogger(__name__)

router = Router()


class DistributePointsStates(StatesGroup):
    choosing_channel = State()
    entering_points = State()


@router.callback_query(F.data == "distribute_points")
async def distribute_points_start(callback: CallbackQuery, user):
    print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user}")  # –û—Ç–ª–∞–¥–∫–∞

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ Django API
    try:
        async with aiohttp.ClientSession() as session:
            url = f"http://127.0.0.1:8000/api/user-channels/{user['telegram_id']}/"
            print(f"–ó–∞–ø—Ä–æ—Å –∫: {url}")  # –û—Ç–ª–∞–¥–∫–∞

            async with session.get(url) as response:
                print(f"–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status}")  # –û—Ç–ª–∞–¥–∫–∞

                if response.status == 200:
                    # –ß–∏—Ç–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
                    response_text = await response.text()
                    print(f"–¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞: {response_text}")  # –û—Ç–ª–∞–¥–∫–∞

                    # –ü–∞—Ä—Å–∏–º JSON
                    try:
                        channels_data = json.loads(response_text)
                        print(f"–†–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {channels_data}")  # –û—Ç–ª–∞–¥–∫–∞
                    except json.JSONDecodeError as e:
                        print(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
                        await callback.message.edit_text(
                            "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö",
                            reply_markup=main_menu()
                        )
                        return

                    if isinstance(channels_data, list) and len(channels_data) > 0:
                        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞–Ω–∞–ª–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

                        buttons = []
                        for channel in channels_data:
                            # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —É –∫–∞–Ω–∞–ª–∞ –µ—Å—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è
                            if 'title' in channel and 'id' in channel:
                                button_text = f"{channel['title'][:20]}..." if len(channel['title']) > 20 else channel[
                                    'title']
                                buttons.append([
                                    InlineKeyboardButton(
                                        text=button_text,
                                        callback_data=f"select_channel:{channel['id']}"
                                    )
                                ])

                        if buttons:  # –ï—Å–ª–∏ –µ—Å—Ç—å –∫–Ω–æ–ø–∫–∏
                            buttons.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="main_menu")])
                            keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)

                            await callback.message.edit_text(
                                f"üí∞ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –±–∞–ª–ª–æ–≤\n\n"
                                f"–í–∞—à –±–∞–ª–∞–Ω—Å: {user['balance']} –±–∞–ª–ª–æ–≤\n\n"
                                f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:",
                                reply_markup=keyboard
                            )
                        else:
                            await callback.message.edit_text(
                                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è.",
                                reply_markup=main_menu()
                            )
                    else:
                        await callback.message.edit_text(
                            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤.\n"
                            "–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∫–∞–Ω–∞–ª —á–µ—Ä–µ–∑ –º–µ–Ω—é '–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª'.",
                            reply_markup=main_menu()
                        )
                else:
                    error_text = await response.text()
                    print(f"–û—à–∏–±–∫–∞ API: {error_text}")  # –û—Ç–ª–∞–¥–∫–∞
                    await callback.message.edit_text(
                        f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤: HTTP {response.status}",
                        reply_markup=main_menu()
                    )
    except Exception as e:
        import traceback
        print(f"–ü–æ–ª–Ω–∞—è –æ—à–∏–±–∫–∞: {traceback.format_exc()}")  # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
        logger.error(f"Error in distribute_points_start: {e}")
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞: {str(e)[:100]}",
            reply_markup=main_menu()
        )

    await callback.answer()


@router.callback_query(F.data.startswith("select_channel:"))
async def select_channel(callback: CallbackQuery, state: FSMContext, user):
    channel_id = callback.data.split(":")[1]
    await state.update_data(selected_channel_id=channel_id)

    await callback.message.edit_text(
        f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞:\n"
        f"–í–∞—à –±–∞–ª–∞–Ω—Å: {user['balance']} –±–∞–ª–ª–æ–≤",
        reply_markup=cancel_keyboard()
    )
    await state.set_state(DistributePointsStates.entering_points)
    await callback.answer()


@router.message(DistributePointsStates.entering_points)
async def enter_points(message: Message, state: FSMContext, user):
    try:
        points = int(message.text)

        if points <= 0:
            await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ")
            return

        if points > user['balance']:
            await message.answer(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–ª–æ–≤. –í–∞—à –±–∞–ª–∞–Ω—Å: {user['balance']}")
            return

        data = await state.get_data()
        channel_id = data.get('selected_channel_id')

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–µ—Ä–µ–≤–æ–¥ –±–∞–ª–ª–æ–≤ —á–µ—Ä–µ–∑ Django API
        try:
            async with aiohttp.ClientSession() as session:
                async with session.post(
                        "http://127.0.0.1:8000/api/distribute-points/",
                        json={
                            "user_id": user['telegram_id'],
                            "channel_id": channel_id,
                            "points": points
                        }
                ) as response:
                    if response.status == 200:
                        result = await response.json()
                        await message.answer(
                            f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ {points} –±–∞–ª–ª–æ–≤!\n"
                            f"–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å –∫–∞–Ω–∞–ª–∞: {result.get('channel_balance', 0)}\n"
                            f"–í–∞—à –±–∞–ª–∞–Ω—Å: {result.get('user_balance', 0)}",
                            reply_markup=main_menu()
                        )
                    else:
                        error_text = await response.text()
                        await message.answer(
                            f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: HTTP {response.status}",
                            reply_markup=main_menu()
                        )
        except Exception as e:
            logger.error(f"Error distributing points: {e}")
            await message.answer(
                f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {str(e)[:100]}",
                reply_markup=main_menu()
            )

        await state.clear()

    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")
    except Exception as e:
        logger.error(f"Error in enter_points: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)[:100]}")
        await state.clear()


@router.callback_query(F.data == "cancel_distribute")
async def cancel_distribute(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞", reply_markup=main_menu())
    await callback.answer()