# bot/handlers/channels.py

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from bot.keyboards.inline import cancel_keyboard, main_menu
from bot.utils.api_client import DjangoAPIClient
from bot.utils.telegram_api import TelegramAPIClient
import re

router = Router()


class ChannelStates(StatesGroup):
    waiting_for_channel = State()
    waiting_for_category = State()


@router.callback_query(F.data == "add_channel")
async def add_channel_start(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "üì¢ –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –∫–∞–Ω–∞–ª–∞!\n\n"
    "‚ö†Ô∏è –ë–æ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–∑–Ω–∞—á–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∫–∞–Ω–∞–ª–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫.\n\n"
    "1Ô∏è‚É£ –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –∫–∞–Ω–∞–ª–∞:\n"
    "‚Ä¢ –í—Ä—É—á–Ω—É—é —á–µ—Ä–µ–∑ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–Ω–∞–ª–∞\n"
    "‚Ä¢ –ò–ª–∏ –ø–æ —Å—Å—ã–ª–∫–µ: [–î–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞](https://t.me/Channel_Ninja_Bot?startchannel&admin=invite_users+delete_messages)\n\n"
    "2Ô∏è‚É£ –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤ —á–∞—Ç @username –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞\n"
    "–ë–æ—Ç –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å, –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –ª–∏ –Ω–∞ –≤–∞—Å –ª—é–¥–∏",
    parse_mode="Markdown",
        reply_markup=cancel_keyboard()
    )
    await state.set_state(ChannelStates.waiting_for_channel)
    await callback.answer()


@router.message(ChannelStates.waiting_for_channel)
async def channel_received(message: Message, state: FSMContext, user):
    channel_info = message.text

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç username
    username_match = re.search(r'@([a-zA-Z0-9_]{5,32})', channel_info)
    if username_match:
        username = username_match.group(1)
        await state.update_data(username=username)
    else:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –û—Ç–ø—Ä–∞–≤—å—Ç–µ @username")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∫–∞–Ω–∞–ª–∞
    telegram_client = TelegramAPIClient()
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
        chat_info = await telegram_client.get_chat(f"@{username}")
        if not chat_info or not chat_info.get('result'):
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–∞–Ω–∞–ª. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ username.")
            return

        chat_result = chat_info['result']
        chat_id = chat_result.get('id')

        if not chat_id:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –∫–∞–Ω–∞–ª–∞.")
            return

        await state.update_data(chat_id=chat_id, title=chat_result.get('title', f'@{username}'))

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∫–∞–Ω–∞–ª–∞
        admins_info = await telegram_client.get_chat_administrators(chat_id)
        if not admins_info or not admins_info.get('result'):
            await message.answer(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∫–∞–Ω–∞–ª–∞.\n"
                "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∫–∞–Ω–∞–ª –ø—É–±–ª–∏—á–Ω—ã–π –∏ –±–æ—Ç –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø."
            )
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        user_id = user['telegram_id']
        admins = admins_info['result']

        is_user_admin = any(
            admin.get('user', {}).get('id') == user_id
            for admin in admins
        )

        if not is_user_admin:
            await message.answer(
                "‚ùå –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —ç—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞!\n"
                "–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –∫–∞–Ω–∞–ª—ã –≤ —Å–∏—Å—Ç–µ–º—É."
            )
            await state.clear()
            return

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–∞–Ω–∞–ª–∞: {str(e)[:100]}")
        await state.clear()
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    categories = [
        ("üì± –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏", "tech"),
        ("üìö –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ", "edu"),
        ("üéÆ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è", "ent"),
        ("üì∞ –ù–æ–≤–æ—Å—Ç–∏", "news"),
        ("–î—Ä—É–≥–æ–µ", "other")
    ]

    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    buttons = []
    for name, code in categories:
        buttons.append([InlineKeyboardButton(text=name, callback_data=f"category:{code}")])
    buttons.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")])

    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=keyboard)
    await state.set_state(ChannelStates.waiting_for_category)


@router.callback_query(F.data.startswith("category:"))
async def category_selected(callback: CallbackQuery, state: FSMContext, user):
    category = callback.data.split(":")[1]
    data = await state.get_data()

    username = data.get('username')
    chat_id = data.get('chat_id')
    title = data.get('title', f'@{username}')

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Django API
    api_client = DjangoAPIClient()
    try:
        result = await api_client.add_channel(
            owner_id=user['telegram_id'],
            channel_id=chat_id,  # –¢–µ–ø–µ—Ä—å —Ä–µ–∞–ª—å–Ω—ã–π ID
            title=title,
            username=username,
            category=category
        )
        await callback.message.edit_text(
            f"‚úÖ –ö–∞–Ω–∞–ª @{username} –¥–æ–±–∞–≤–ª–µ–Ω!\n"
            f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}"
        )
    except Exception as e:
        error_msg = str(e)[:100] + "..." if len(str(e)) > 100 else str(e)
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞: {error_msg}")

    await state.clear()
    await callback.answer()


@router.callback_query(F.data == "cancel")
async def cancel_operation(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text("–û—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=main_menu())
    await callback.answer()