# bot/handlers/tasks.py

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from bot.keyboards.inline import main_menu
from bot.utils.api_client import DjangoAPIClient
from bot.utils.telegram_api import TelegramAPIClient

router = Router()


@router.callback_query(F.data == "get_task")
async def get_task(callback: CallbackQuery, user):
    api_client = DjangoAPIClient()

    try:
        task_data = await api_client.get_subscription_task(user['telegram_id'])

        if 'message' in task_data :
            await callback.message.edit_text(
                "üì≠ –ù–µ—Ç –∑–∞–¥–∞–Ω–∏–π\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ",
                reply_markup=main_menu()
            )
        else:
            channel_title = task_data.get('channel_title', '–ö–∞–Ω–∞–ª')
            channel_username = task_data.get('channel_username', '')
            channel_id = task_data.get('channel', '')  # ID –∫–∞–Ω–∞–ª–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏

            text = (
                f"üéØ –ó–∞–¥–∞–Ω–∏–µ!\n\n"
                f"–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞:\n"
                f"üì¢ {channel_title}\n"
                f"{'@' + channel_username if channel_username else ''}\n\n"
                f"–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å"
            )

            from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å", callback_data=f"check_sub:{task_data['id']}:{channel_id}")],
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]
            ])

            await callback.message.edit_text(text, reply_markup=keyboard)

    except Exception as e:
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞: {str(e)[:100]}",
            reply_markup=main_menu()
        )

    await callback.answer()


@router.callback_query(F.data.startswith("check_sub:"))
async def check_subscription(callback: CallbackQuery, user=None):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ user —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if user is None:
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=main_menu()
        )
        await callback.answer()
        return

    # –†–∞–∑–±–∏—Ä–∞–µ–º callback data
    parts = callback.data.split(":")
    task_id = parts[1]
    channel_id = parts[2] if len(parts) > 2 else None

    print(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏: user={user['telegram_id']}, task={task_id}, channel={channel_id}")  # –û—Ç–ª–∞–¥–∫–∞

    telegram_client = TelegramAPIClient()

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É —á–µ—Ä–µ–∑ Telegram API
        if channel_id:
            member_info = await telegram_client.get_chat_member(channel_id, user['telegram_id'])

            if member_info and member_info.get('result'):
                status = member_info['result'].get('status')
                print(f"–°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {status}")  # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–Ω (member, administrator, creator)
                if status in ['member', 'administrator', 'creator']:
                    # –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞, –Ω–∞—á–∏—Å–ª—è–µ–º –±–∞–ª–ª—ã —á–µ—Ä–µ–∑ Django API
                    api_client = DjangoAPIClient()
                    result = await api_client.confirm_subscription(user['telegram_id'], task_id)

                    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {result}")  # –û—Ç–ª–∞–¥–∫–∞

                    if result and 'error' not in result:
                        new_balance = result.get('new_balance', user['balance'] + 1)
                        points = result.get('points', 1)
                        await callback.message.edit_text(
                            f"‚úÖ +{points} –±–∞–ª–ª!\n"
                            f"–ë–∞–ª–∞–Ω—Å: {new_balance}",
                            reply_markup=main_menu()
                        )
                    elif result and 'error' in result:
                        error_msg = result['error']
                        if 'already completed' in error_msg:
                            await callback.message.edit_text(
                                "‚ùå –≠—Ç–∞ –∑–∞–¥–∞—á–∞ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!\n–ü–æ–ª—É—á–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ.",
                                reply_markup=main_menu()
                            )
                        elif 'not found' in error_msg:
                            await callback.message.edit_text(
                                "‚ùå –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!\n–ü–æ–ª—É—á–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ.",
                                reply_markup=main_menu()
                            )
                        else:
                            await callback.message.edit_text(
                                f"‚ùå –û—à–∏–±–∫–∞: {error_msg}",
                                reply_markup=main_menu()
                            )
                    else:
                        await callback.message.edit_text(
                            "‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n–ë–∞–ª–ª—ã –Ω–∞—á–∏—Å–ª–µ–Ω—ã.",
                            reply_markup=main_menu()
                        )
                else:
                    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω
                    status_text = {
                        'left': '–≤—ã –≤—ã—à–ª–∏ –∏–∑ –∫–∞–Ω–∞–ª–∞',
                        'kicked': '–≤—ã –±—ã–ª–∏ –∏—Å–∫–ª—é—á–µ–Ω—ã –∏–∑ –∫–∞–Ω–∞–ª–∞',
                        'restricted': '—É –≤–∞—Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã –ø—Ä–∞–≤–∞ –≤ –∫–∞–Ω–∞–ª–µ'
                    }.get(status, '–≤—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª')

                    await callback.message.edit_text(
                        f"‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∫–∞–∑–∞–ª–∞, —á—Ç–æ {status_text}!\n"
                        f"–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                        reply_markup=main_menu()
                    )
            else:
                # –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                await callback.message.edit_text(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É. –í–æ–∑–º–æ–∂–Ω–æ, –∫–∞–Ω–∞–ª –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∏–ª–∏ –±–æ—Ç –Ω–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø–∞.\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                    reply_markup=main_menu()
                )
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç channel_id, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
            await callback.message.edit_text(
                "‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ.",
                reply_markup=main_menu()
            )

    except Exception as e:
        import traceback
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {traceback.format_exc()}")  # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {str(e)[:100]}",
            reply_markup=main_menu()
        )

    await callback.answer()


@router.callback_query(F.data == "profile")
async def show_profile(callback: CallbackQuery, user):
    text = (
        f"üë§ –ü—Ä–æ—Ñ–∏–ª—å\n\n"
        f"ID: {user['telegram_id']}\n"
        f"Username: @{user['username']}\n"
        f"–ë–∞–ª–∞–Ω—Å: {user['balance']} –±–∞–ª–ª–æ–≤"
    )

    await callback.message.edit_text(text, reply_markup=main_menu())
    await callback.answer()